plugins {
    id("java")
    id("maven-publish") // 为了产生pom.xml文件
    id("signing") // 组件签名插件
}

group = "cn.starrys"
version = "0.0.3"
description = "工具包"

ext {
    jetbrainsAnnotations = '23.0.0'
    junitVersion = '5.9.0'
    lombokVersion = '1.18.24'
    gsonVersion = '2.10'
    javaxServletVersion = '4.0.1'
    javaxAnnotationVersion = '1.3.2'
    jakartaServletVersion = '5.0.0'
    jakartaAnnotationVersion = '2.1.0'
}

dependencies {
    // JetBrains 注解
    implementation("org.jetbrains:annotations:$jetbrainsAnnotations")

    // Junit5
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")

    // Gson
    implementation("com.google.code.gson:gson:$gsonVersion")

    // javax
    implementation("javax.servlet:javax.servlet-api:$javaxServletVersion")
    implementation("javax.annotation:javax.annotation-api:$javaxAnnotationVersion")

    // jakarta
    implementation("jakarta.servlet:jakarta.servlet-api:$jakartaServletVersion")
    implementation("jakarta.annotation:jakarta.annotation-api:$jakartaAnnotationVersion")
}

test {
    useJUnitPlatform()
}

allprojects {
    repositories {
        mavenLocal()
        maven { name = "aliyun-maven"; url = "https://maven.aliyun.com/repository/public" }
        maven { name = "tencentyun-maven"; url = "https://mirrors.cloud.tencent.com/maven" }
        mavenCentral()
    }
    clean { delete("$projectDir/out") }
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding("UTF-8")
        }
    }
    tasks.withType(Javadoc).tap {
        configureEach {
            options {
                encoding("UTF-8")
                version(true)
            }
        }
    }
    java {
        // 生成javaDoc.jar
        withJavadocJar()
        // 生成Source.jar
        withSourcesJar()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            from components.java
            pom {
                // name = "星空的工具包"（此 name 非artifactId）
                name = project.name
                // 描述
                description = project.description
                // 项目地址
                url = "https://github.com/XingKong746/commons-tool"
                licenses {
                    // 许可证名称和地址
                    license {
                        name = "MIT License"
                        url = "https://github.com/XingKong746/commons-tool/blob/main/LICENSE"
                    }
                }
                developers {
                    // 开发者信息
                    developer {
                        // 开发者ID
                        id = "79194954"
                        // 开发者名
                        name = "XingKong746"
                        // 开发者邮箱
                        email = "XingKong746@163.com"
                    }
                }
                // 版本控制仓库地址
                scm {
                    connection = "scm:git:git://github.com/XingKong746/commons-tool.git"
                    developerConnection = "scm:git:ssh://github.com/XingKong746/commons-tool.git"
                    // 仓库url
                    url = "https://github.com/XingKong746/commons-tool"
                }
            }
        }
    }

    repositories {
        maven {
            name("sonatype")
            def sonatypeRepository = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def sonatypeSnapshotRepository = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url(project.version.endsWith("SNAPSHOT") ? sonatypeSnapshotRepository : sonatypeRepository)
            credentials {
                username(sonatypeUsername)
                password(sonatypePassword)
            }
        }
    }

}
signing {
    sign publishing.publications.mavenJava
}
